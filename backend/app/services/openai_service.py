from pydantic import BaseModel
from openai import OpenAI
from typing import Tuple, Literal
from app.core.config import settings

class ChatTitleResponse(BaseModel):
    title: str
    emoji: Literal["üíº", "üé®", "üè†", "üéØ", "üë•"]  # —Å—Ç—Ä–æ–≥–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏

class OpenAIService:
    def __init__(self):
        self.client = OpenAI(api_key=settings.OPENAI_API_KEY)
        self.model = "gpt-4o-mini"

    async def generate_chat_title(self, content: str, max_length: int = 200) -> Tuple[str, str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –∏ —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (title, emoji)
        """
        try:
            truncated_content = content[:max_length]
            
            completion = self.client.beta.chat.completions.parse(
                model=self.model,
                messages=[
                    {"role": "system", "content": "–¢—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è —á–∞—Ç–æ–≤. –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 40 —Å–∏–º–≤–æ–ª–æ–≤) –∏ –ø–æ–¥–±–∏—Ä–∞–π –æ–¥–∏–Ω —ç–º–æ–¥–∑–∏ –∏–∑ —Å–ø–∏—Å–∫–∞: üíº (—Ä–∞–±–æ—Ç–∞/–±–∏–∑–Ω–µ—Å), üé® (—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ), üè† (–¥–æ–º/–±—ã—Ç), üéØ (—Ö–æ–±–±–∏/—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è), üë• (–æ–±—â–µ–Ω–∏–µ/–æ—Ç–Ω–æ—à–µ–Ω–∏—è). –ò—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è."},
                    {"role": "user", "content": truncated_content}
                ],
                response_format=ChatTitleResponse
            )
            
            result = completion.choices[0].message.parsed
            return result.title, result.emoji

        except Exception as e:
            print(f"Error generating chat title: {str(e)}")
            return "–ù–æ–≤—ã–π —á–∞—Ç", "üí≠"

openai_service = OpenAIService()
