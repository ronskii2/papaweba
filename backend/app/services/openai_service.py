from enum import Enum
from pydantic import BaseModel
from openai import OpenAI
from typing import Tuple
from app.core.config import settings

# –®–∞–≥ 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è —ç–º–æ–¥–∑–∏
class EmojiEnum(str, Enum):
    WORK = "üíº"           # –†–∞–±–æ—Ç–∞
    ART = "üé®"            # –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ
    HOME = "üè†"           # –ñ–∏–∑–Ω—å
    HOBBY = "üéØ"          # –•–æ–±–±–∏
    COMMUNICATION = "üë•"  # –û–±—â–µ–Ω–∏–µ

# –®–∞–≥ 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Enum
class ChatTitleResponse(BaseModel):
    title: str
    emoji: EmojiEnum

class OpenAIService:
    def __init__(self):
        self.client = OpenAI(api_key=settings.OPENAI_API_KEY)
        self.model = "gpt-4o-mini"  # –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏

    async def generate_chat_title(self, content: str, max_length: int = 200) -> Tuple[str, str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –∏ —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (title, emoji)
        """
        truncated_content = content[:max_length]
        
        # –®–∞–≥ 3: –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏ –∏–∑ –∑–∞–¥–∞–Ω–Ω—ã—Ö
        prompt = (
            "–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —á–∞—Ç–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–æ–µ, –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ "
            "(–º–∞–∫—Å–∏–º—É–º 40 —Å–∏–º–≤–æ–ª–æ–≤) –∏ –≤—ã–±–µ—Ä–∏ –û–î–ò–ù –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n"
            "- üíº –†–∞–±–æ—Ç–∞\n"
            "- üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ\n"
            "- üè† –ñ–∏–∑–Ω—å\n"
            "- üéØ –•–æ–±–±–∏\n"
            "- üë• –û–±—â–µ–Ω–∏–µ\n\n"
            f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: \"{truncated_content}\"\n\n"
            "–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ JSON:\n"
            "{\n"
            '    "title": "–Ω–∞–∑–≤–∞–Ω–∏–µ",\n'
            '    "emoji": "—ç–º–æ–¥–∑–∏"\n'
            "}"
        )
        
        messages = [
            {"role": "system", "content": "–¢—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è —á–∞—Ç–æ–≤. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ —Ç–æ—á–Ω—ã–º."},
            {"role": "user", "content": prompt}
        ]

        try:
            # –®–∞–≥ 4: –ó–∞–ø—Ä–æ—Å –∫ OpenAI —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Structured Outputs
            completion = await self.client.beta.chat.completions.parse(
                model=self.model,
                messages=messages,
                response_format=ChatTitleResponse,  # –£–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞
                max_tokens=50
            )
            
            # –®–∞–≥ 5: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            parsed_response = completion.choices[0].message.parsed
            title = parsed_response.title
            emoji = parsed_response.emoji

            return title, emoji

        except Exception as e:
            print(f"Error generating chat title: {str(e)}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            return "–ù–æ–≤—ã–π —á–∞—Ç", "üí≠"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
openai_service = OpenAIService()
